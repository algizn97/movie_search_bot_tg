import logging.config
from typing import Optional

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

import keyboards.inline as kbi
import keyboards.reply as kbr
from api.movie_by_rating_api import movie_by_rating
from database.model import History, User
from handlers.commands.callback import generate_response_message
from logger_helper.logger_helper import LOGGING_CONFIG
from state.states import Rating
from utils.paginator import Paginator

logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger("movie_by_rating")

router = Router(name=__name__)


@router.message(Command("movie_by_rating"))
@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É")
async def cmd_movie_by_rating(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /movie_by_rating.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        await state.set_state(Rating.rating)
        await message.answer(
            text="–í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥(–Ω–∞–ø—Ä–∏–º–µ—Ä 7, 8 –∏–ª–∏ 7.2-8):", reply_markup=kbr.cancel
        )
        logger.debug(
            "Command movie_by_rating processed successfully for user: %s",
            message.from_user.full_name,
        )
    except Exception as e:
        logger.error("Error processing command movie_by_rating: %s", e)


@router.message(Rating.rating)
async def process_rating(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ä–µ–π—Ç–∏–Ω–≥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç
    —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM, –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
                  –¥–∞–Ω–Ω—ã—Ö –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.
    """
    try:
        rating_input = message.text

        if "-" in rating_input:
            min_rating, max_rating = map(float, rating_input.split("-"))
            if not (0 <= min_rating <= max_rating <= 10):
                await message.reply(
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω —Ä–µ–π—Ç–∏–Ω–≥–∞ –æ—Ç 0 –¥–æ 10."
                )
                return
            await state.update_data(rating=rating_input)
        else:
            rating = float(rating_input)
            if not (0 <= rating <= 10):
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 10.")
                return
            await state.update_data(rating=rating)
        await message.answer(
            "–•–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞?", reply_markup=kbr.main_menu_keyboard
        )
        await state.set_state(Rating.ask_genre)
        logger.debug(
            "Rating input processed successfully for user: %s, rating: %s",
            message.from_user.full_name,
            message.text,
        )
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω.")
        logger.error(
            "Invalid input for rating from user: %s", message.from_user.full_name
        )
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞.")
        logger.error("Error processing rating: %s", e)


@router.message(Rating.ask_genre)
async def ask_genre_response(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞.

    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ö–æ—á–µ—Ç –ª–∏ –æ–Ω –≤—ã–±—Ä–∞—Ç—å –∂–∞–Ω—Ä. –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç
    –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–∞/–Ω–µ—Ç), –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ –≤—ã–±–æ—Ä–µ –∂–∞–Ω—Ä–∞.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        user_response = message.text.lower()

        if user_response == "–¥–∞":
            await message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=await kbr.reply_genres()
            )
            await state.set_state(Rating.genre)
            logger.info("The user has selected: 'Yes' for the genre selection.")
        elif user_response == "–Ω–µ—Ç":
            await message.answer(
                "–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=kbr.to_main
            )
            await state.set_state(Rating.count)
            logger.info(
                "The user has selected: 'No' and requested the number of results."
            )
        else:
            await message.reply(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: '–î–∞', '–ù–µ—Ç' –∏–ª–∏ '–û—Ç–º–µ–Ω–∞'."
            )
            logger.warning("The user entered an incorrect response: %s", message.text)
    except ValueError as e:
        await message.reply(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        logger.error("Error in ask_genre_response: %s", e)


@router.message(Rating.genre)
async def process_genre(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∂–∞–Ω—Ä–∞.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–∞–Ω—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∂–∞–Ω—Ä–æ–º.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        await state.update_data(genre=message.text.lower())
        await state.set_state(Rating.count)
        await message.answer(
            "–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=kbr.to_main
        )
        logger.debug(
            "Genre input processed successfully for user: %s, genre: %s",
            message.from_user.full_name,
            message.text,
        )
    except Exception as e:
        logger.error("Error processing genre input: %s", e)


async def validate_count(count: int) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∏–ª—å–º–æ–≤.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    Optional[str]: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ,
                   –∏–Ω–∞—á–µ None.

    –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
    - –ï—Å–ª–∏ count <= 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.
    - –ï—Å–ª–∏ count > 250, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.
    """
    if count <= 0:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
    elif count > 250:
        return "–õ–∏–º–∏—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 250."
    return None


@router.message(Rating.count)
async def process_count(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.
    """
    try:
        count = int(message.text)
        validation_error = await validate_count(count)

        if validation_error:
            await message.reply(validation_error)
            logger.warning(
                "User %s entered an invalid count: %s",
                message.from_user.full_name,
                message.text,
            )
            return

        data = await state.get_data()
        rating = data.get("rating")
        genre = data.get("genre")
        movies = await movie_by_rating(rating, count, genre)

        if not movies:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kbr.main
            )
            logger.info(
                "No movies found for user %s with rating '%s'",
                message.from_user.full_name,
                rating,
            )
            return

        User.get_or_create(
            user_id=message.from_user.id,
            defaults={"username": message.from_user.username},
        )
        for movie in movies:
            History.create(
                user_id=message.from_user.id,
                name=movie["name"],
                description=movie["description"],
                rating=movie["rating"],
                year=movie["year"],
                genres=movie["genres"],
                ageRating=movie["ageRating"],
                poster_url=movie["poster_url"],
            )

        paginator = Paginator(movies, items_per_page=6)
        response_message = generate_response_message(paginator)

        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(movies)}")
        await message.answer(
            response_message,
            reply_markup=kbi.get_movie_selection_keyboard(
                paginator.get_current(), paginator.current_page
            ),
            parse_mode="Markdown",
        )
        await state.clear()
        await state.update_data(paginator=paginator)
        logger.debug(
            "Successfully processed movie count input for user %s",
            message.from_user.full_name,
        )
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        logger.error(
            "ValueError for user %s: Invalid input '%s'",
            message.from_user.full_name,
            message.text,
        )
    except Exception as e:
        logger.error("Error processing movie count input: %s", e)
