import logging.config
from typing import Optional

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

import keyboards.inline as kbi
import keyboards.reply as kbr
from api.movie_by_genre_api import movie_by_genre
from database.model import History, User
from handlers.commands.callback import generate_response_message
from logger_helper.logger_helper import LOGGING_CONFIG
from state.states import Genre
from utils.paginator import Paginator

logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger("movie_by_genre")

router = Router(name=__name__)


@router.message(Command("movie_by_genre"))
@router.message(F.text == "üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –ø–æ –∂–∞–Ω—Ä—É")
async def cmd_movie_search(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /movie_search.
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –Ω–∞ –æ–∂–∏–¥–∞–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–∞.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –∫–æ–º–∞–Ω–¥—É –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        await state.set_state(Genre.genre)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä:", reply_markup=await kbr.reply_genres())
        logger.debug(
            "Command movie_by_genre processed successfully for user: %s",
            message.from_user.full_name,
        )
    except Exception as e:
        logger.error("Error processing command movie_by_genre: %s", e)


@router.message(Genre.genre)
async def process_genre(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∂–∞–Ω—Ä–∞.

    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –∂–∞–Ω—Ä –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º –∂–∞–Ω—Ä–æ–º.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        await state.update_data(genre=message.text.lower())
        await state.set_state(Genre.count)
        await message.answer(
            "–°–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å?", reply_markup=kbr.to_main
        )
        logger.debug(
            "Genre input processed successfully for user: %s, genre: %s",
            message.from_user.full_name,
            message.text,
        )
    except Exception as e:
        logger.error("Error processing genre input: %s", e)


async def validate_count(count: int) -> Optional[str]:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–æ–ø—É—Å—Ç–∏–º—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ñ–∏–ª—å–º–æ–≤.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
    count (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
    Optional[str]: –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ,
                   –∏–Ω–∞—á–µ None.

    –£—Å–ª–æ–≤–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏:
    - –ï—Å–ª–∏ count <= 0, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–≤–æ–¥–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞.
    - –ï—Å–ª–∏ count > 250, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞.
    """
    if count <= 0:
        return "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ."
    elif count > 250:
        return "–õ–∏–º–∏—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 250."
    return None


@router.message(Genre.count)
async def process_count(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ñ–∏–ª—å–º–æ–≤.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.

    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏.
    """
    try:
        count = int(message.text)
        validation_error = await validate_count(count)

        if validation_error:
            await message.reply(validation_error)
            logger.warning(
                "User %s entered an invalid count: %s",
                message.from_user.full_name,
                message.text,
            )
            return

        data = await state.get_data()
        genre = data.get("genre")
        movies = await movie_by_genre(genre, count)

        if not movies:
            await message.answer(
                "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=kbr.main
            )
            logger.info(
                "No movies found for user %s with genre '%s'",
                message.from_user.full_name,
                genre,
            )
            return

        User.get_or_create(
            user_id=message.from_user.id,
            defaults={"username": message.from_user.username},
        )
        for movie in movies:
            History.create(
                user_id=message.from_user.id,
                name=movie["name"],
                description=movie["description"],
                rating=movie["rating"],
                year=movie["year"],
                genres=movie["genres"],
                ageRating=movie["ageRating"],
                poster_url=movie["poster_url"],
            )

        paginator = Paginator(movies, items_per_page=6)
        response_message = generate_response_message(paginator)

        await message.answer(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤: {len(movies)}")
        await message.answer(
            response_message,
            reply_markup=kbi.get_movie_selection_keyboard(
                paginator.get_current(), paginator.current_page
            ),
            parse_mode="Markdown",
        )
        await state.clear()
        await state.update_data(paginator=paginator)
        logger.debug(
            "Successfully processed movie count input for user %s",
            message.from_user.full_name,
        )
    except ValueError:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        logger.error(
            "ValueError for user %s: Invalid input '%s'",
            message.from_user.full_name,
            message.text,
        )
    except Exception as e:
        logger.error("Error processing movie genre input: %s", e)
