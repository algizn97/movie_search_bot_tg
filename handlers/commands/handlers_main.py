import logging.config

from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext

import keyboards.reply as kbr
from database.model import User
from logger_helper.logger_helper import LOGGING_CONFIG

logging.config.dictConfig(LOGGING_CONFIG)
logger = logging.getLogger("handlers_main")

router = Router(name=__name__)


@router.message(Command("start", "hello-world"))
@router.message(F.text.lower() == "–ø—Ä–∏–≤–µ—Ç")
async def cmd_start(message: types.Message) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ /hello-world, –∞ —Ç–∞–∫–∂–µ —Ç–µ–∫—Å—Ç–∞ '–ø—Ä–∏–≤–µ—Ç'.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    user_id = message.from_user.id
    username = message.from_user.username
    try:
        User.get_or_create(user_id=user_id, defaults={"username": username})
        await message.answer(
            text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kinopoisk!\n"
            "–í—Å–µ —Ç–æ–ø–æ–≤—ã–µ –Ω–æ–≤–∏–Ω–∫–∏, —Å–µ—Ä–∏–∞–ª—ã, –∞–Ω–∏–º–µ, –º—É–ª—å—Ç—Ñ–∏–ª—å–º—ã –Ω–∞–π–¥–µ—Ç–µ —É –Ω–∞—Å üòâ",
            reply_markup=kbr.main,
        )
        logger.debug(
            "Command start processed successfully for user: %s",
            message.from_user.full_name,
        )
    except Exception as e:
        logger.error("Error processing command start: %s", e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.message(F.text == "–ù–∞ –≥–ª–∞–≤–Ω—É—é")
async def cmd_to_main(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /to_main.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏ –ø—É–Ω–∫—Ç –º–µ–Ω—é...", reply_markup=kbr.main)
        logger.debug(
            "Command to_main processed successfully for user: %s",
            message.from_user.full_name,
        )
    except Exception as e:
        logger.error("Error processing command to_main: %s", e)


@router.message(Command("help"))
async def cmd_help(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help.
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    try:
        await state.clear()
        await message.answer(
            text="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥:\n"
            "/movie_search - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n"
            "/movie_by_genre - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–∞/—Å–µ—Ä–∏–∞–ª–∞ –ø–æ –∂–∞–Ω—Ä—É\n"
            "/movie_by_rating - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É\n"
            "/low_budget_movie - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ —Å –Ω–∏–∑–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º\n"
            "/high_budget_movie - –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤/—Å–µ—Ä–∏–∞–ª–æ–≤ —Å –≤—ã—Å–æ–∫–∏–º –±—é–¥–∂–µ—Ç–æ–º\n"
            "/history - –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"
        )
        logger.debug(
            "Command help processed successfully for user: %s",
            message.from_user.full_name,
        )
    except Exception as e:
        logger.error("Error processing command help: %s", e)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=kbr.main
        )


@router.message(Command("cancel"))
@router.message(lambda message: message.text.casefold() in ["cancel", "–æ—Ç–º–µ–Ω–∞"])
async def cmd_cancel(message: types.Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /cancel –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞ "cancel"/"–æ—Ç–º–µ–Ω–∞".
    –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –∏ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    :param state: –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM.
    """
    current_state = await state.get_state()

    if current_state is None:
        await message.reply(
            text="–•–æ—Ä–æ—à–æ, –Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏–ª–æ.", reply_markup=kbr.main
        )
        logger.debug("Cancel command received but no active state.")
        return

    try:
        await state.clear()
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=kbr.main)
        logger.debug("Command cancel executed successfully. State cleared.")
    except Exception as e:
        logger.error("Error while cancelling command: %s", e)
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=kbr.main,
        )
